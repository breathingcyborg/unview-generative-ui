// Generated by LLM - ideally this should be you domain entities or dtos

import { z } from 'zod';

export const ProductSchema = z.object({
    product_id: z.string().describe('Unique identifier for the product, e.g., PROD123'),
    name: z.string().describe('Name of the product, e.g., Wireless Noise-Cancelling Headphones'),
    description: z.string().describe('Detailed description of the product'),
    category: z.string().describe('Category of the product, e.g., Electronics, Apparel'),
    sku: z.string().describe('Stock Keeping Unit, e.g., WNCH-BLK-2023'),
    price: z.number().positive().describe('Selling price of the product'),
    cost_price: z.number().positive().describe('Cost to acquire/manufacture the product'),
    supplier_id: z.string().describe('Identifier for the supplier of this product'),
    tags: z.array(z.string()).describe('List of descriptive tags, e.g., ["bluetooth", "audio"]'),
    created_at: z.string().datetime().describe('ISO 8601 datetime string for product creation'),
    updated_at: z.string().datetime().describe('ISO 8601 datetime string for last update'),
});
export type Product = z.infer<typeof ProductSchema>;

export const WarehouseSchema = z.object({
    warehouse_id: z.string().describe('Unique identifier for the warehouse, e.g., WH01'),
    name: z.string().describe('Name of the warehouse, e.g., Main Distribution Center'),
    location_city: z.string().describe('City where the warehouse is located'),
    capacity_sqft: z.number().int().positive().describe('Storage capacity in square feet'),
});
export type Warehouse = z.infer<typeof WarehouseSchema>;

export const InventoryItemSchema = z.object({
    inventory_item_id: z.string().describe('Unique identifier for the inventory item record, e.g., INVITEM789'),
    product_id: z.string().describe('References Product.product_id'),
    warehouse_id: z.string().describe('References Warehouse.warehouse_id'),
    quantity_on_hand: z.number().int().nonnegative().describe('Current quantity in stock'),
    reorder_level: z.number().int().nonnegative().describe('Stock level at which to reorder'),
    safety_stock_level: z.number().int().nonnegative().describe('Buffer stock level'),
    last_restock_date: z.string().datetime().describe('ISO 8601 datetime of last restock'),
    next_expected_delivery_date: z.string().datetime().optional().describe('ISO 8601 datetime for next expected delivery, if any'),
    location_in_warehouse: z.string().optional().describe('Specific location in warehouse, e.g., Aisle 3, Shelf B'),
});
export type InventoryItem = z.infer<typeof InventoryItemSchema>;

export const SupplierSchema = z.object({
    supplier_id: z.string().describe('Unique identifier for the supplier, e.g., SUPP007'),
    name: z.string().describe('Name of the supplier company, e.g., AudioTech Inc.'),
    contact_email: z.string().email().describe('Contact email for the supplier'),
    average_lead_time_days: z.number().int().positive().describe('Average time in days for delivery from this supplier'),
});
export type Supplier = z.infer<typeof SupplierSchema>;

export const AddressSchema = z.object({
    address_id: z.string().describe('Unique identifier for the address'),
    street: z.string().describe('Street name and number'),
    city: z.string().describe('City name'),
    state_province: z.string().describe('State or province'),
    postal_code: z.string().describe('Postal or ZIP code'),
    country: z.string().describe('Country name'),
    address_type: z.enum(['shipping', 'billing']).describe('Type of address'),
});
export type Address = z.infer<typeof AddressSchema>;

export const CustomerSchema = z.object({
    customer_id: z.string().describe('Unique identifier for the customer, e.g., CUST001'),
    first_name: z.string().describe('Customer\'s first name'),
    last_name: z.string().describe('Customer\'s last name'),
    email: z.string().email().describe('Customer\'s email address'),
    phone: z.string().optional().describe('Customer\'s phone number'),
    segment: z.enum(['VIP', 'New', 'Frequent Buyer', 'Lapsed']).describe('Customer segment classification'),
    created_at: z.string().datetime().describe('ISO 8601 datetime of customer account creation'),
});
export type Customer = z.infer<typeof CustomerSchema>;

export const OrderSchema = z.object({
    order_id: z.string().describe('Unique identifier for the order, e.g., ORD5001'),
    customer_id: z.string().describe('References Customer.customer_id'),
    order_date: z.string().datetime().describe('ISO 8601 datetime when the order was placed'),
    status: z.enum([
        'Pending Confirmation', 'Processing', 'Awaiting Shipment',
        'Shipped', 'Delivered', 'Cancelled', 'Returned'
    ]).describe('Current status of the order'),
    total_amount: z.number().positive().describe('Total monetary value of the order'),
    shipping_address_id: z.string().describe('References Address.address_id for shipping'),
    billing_address_id: z.string().describe('References Address.address_id for billing'),
    discount_code_used: z.string().optional().describe('Discount code applied, if any'),
    notes: z.string().optional().describe('Additional notes for the order'),
});
export type Order = z.infer<typeof OrderSchema>;

export const OrderItemSchema = z.object({
    order_item_id: z.string().describe('Unique identifier for this line item in an order'),
    order_id: z.string().describe('References Order.order_id'),
    product_id: z.string().describe('References Product.product_id'),
    quantity: z.number().int().positive().describe('Quantity of the product ordered'),
    price_at_purchase: z.number().positive().describe('Price per unit at the time of purchase'),
});
export type OrderItem = z.infer<typeof OrderItemSchema>;

export const ShipmentSchema = z.object({
    shipment_id: z.string().describe('Unique identifier for the shipment, e.g., SHIP901'),
    order_id: z.string().describe('References Order.order_id'),
    carrier_name: z.string().describe('Name of the shipping carrier, e.g., FedEx, UPS'),
    tracking_number: z.string().describe('Tracking number provided by the carrier'),
    dispatch_date: z.string().datetime().optional().describe('ISO 8601 datetime when dispatched'),
    estimated_delivery_date: z.string().datetime().optional().describe('ISO 8601 datetime for estimated delivery'),
    actual_delivery_date: z.string().datetime().optional().describe('ISO 8601 datetime of actual delivery'),
    status: z.enum([
        'Label Created', 'In Transit', 'Out for Delivery',
        'Delivered', 'Delayed', 'Exception'
    ]).describe('Current status of the shipment'),
    shipping_cost: z.number().nonnegative().describe('Cost of this shipment'),
    origin_warehouse_id: z.string().describe('References Warehouse.warehouse_id from where it was shipped'),
});
export type Shipment = z.infer<typeof ShipmentSchema>;

export const PromotionSchema = z.object({
    promotion_id: z.string().describe('Unique identifier for the promotion'),
    name: z.string().describe('Name of the promotion, e.g., Summer Sale 20%'),
    code: z.string().describe('Discount code to be used by customers, e.g., SUMMER20'),
    discount_type: z.enum(['percentage', 'fixed_amount']).describe('Type of discount'),
    discount_value: z.number().positive().describe('Value of the discount'),
    start_date: z.string().datetime().describe('ISO 8601 datetime when promotion starts'),
    end_date: z.string().datetime().describe('ISO 8601 datetime when promotion ends'),
    is_active: z.boolean().describe('Whether the promotion is currently active'),
    min_order_value: z.number().positive().optional().describe('Minimum order value for promotion to apply'),
});

export type Promotion = z.infer<typeof PromotionSchema>;